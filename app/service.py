# service.py

from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.db.repo import add_task, count_open, list_open_paged


def format_ts(ts: float) -> str:
    """–ü—Ä–æ—Å—Ç–æ–π —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (UTC)."""
    if ts is None:
        return "‚Äî"
    return datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M")


def build_list_view(user_id: int, page: int = 0, limit: int = 5) -> tuple[str, InlineKeyboardMarkup]:
    # 1) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    if limit <= 0:
        limit = 5
    page = max(0, page)

    # 2) –î–∞–Ω–Ω—ã–µ: total, pages, rows
    total = count_open(user_id)
    if total == 0:
        text = "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /add"
        return text, InlineKeyboardMarkup(inline_keyboard=[])

    pages = (total + limit - 1) // limit
    if page >= pages:
        page = pages - 1

    offset = page * limit
    rows = list_open_paged(user_id, offset, limit)

    # 3) –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header_lines = [
        "üóíÔ∏è –ú–æ–∏ –∑–∞–¥–∞—á–∏",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {pages}",
        f"–í—Å–µ–≥–æ: {total}",
        ""
    ]

    # 4) –≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞
    body_lines = []
    for i, row in enumerate(rows, start=1):
        rt = format_ts(row["next_reminder_at"])
        info = [
            f"{i}) {row['task_name']}",
            f"   –°–ª–µ–¥. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {rt}",
            f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {row['interval']} –º–∏–Ω"
        ]
        if row["task_note"]:
            info.append(f"   –ó–∞–º–µ—Ç–∫–∞: {row['task_note']}")
        if row["paused_until"]:
            info.append(f"   –û—Ç–ª–æ–∂–µ–Ω–æ –¥–æ: {format_ts(row['paused_until'])}")
        body_lines.append("\n".join(info))

    text = "\n".join(header_lines + body_lines) or "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç."

    # 5) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb_rows = []

    # –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ ‚Äî —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π
    for row in rows:
        task_id = row["id"]
        kb_rows.append([
            InlineKeyboardButton(
                text="‚úÖ –°–¥–µ–ª–∞–Ω–æ",
                callback_data=f"task_done|{task_id}|{page}|{limit}"
            ),
            InlineKeyboardButton(
                text="‚è± –û—Ç–ª–æ–∂–∏—Ç—å",
                callback_data=f"task_snooze|{task_id}|{page}|{limit}"
            ),
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"task_delete|{task_id}|{page}|{limit}"
            ),
        ])

    # –†—è–¥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if page > 0:
        nav_row.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_page|{page - 1}|{limit}")
        )
    else:
        # –ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º ‚Äî ¬´–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è¬ª –∫–Ω–æ–ø–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-–∫–± –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        pass

    if page < pages - 1:
        nav_row.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"list_page|{page + 1}|{limit}")
        )

    if nav_row:
        kb_rows.append(nav_row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    return text, keyboard

def add_task_service(user_id: int, task_name: str, notes: str | None, interval: int) -> str:
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    if not task_name or not task_name.strip():
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–µ")
    # if interval <= 0:
    #   raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

    task_id = add_task(user_id, task_name.strip(), notes, interval)
    return f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {task_id}). –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –º–∏–Ω—É—Ç."
