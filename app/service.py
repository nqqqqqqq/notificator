# app/service.py
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Tuple, Optional, List

from app.db import repo


def format_ts(ts: float | None) -> str:
    if not ts:
        return "‚Äî"
    # —Ö—Ä–∞–Ω–∏–º UTC (time.time), —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ, –±–µ–∑ TZ
    return datetime.utcfromtimestamp(ts).strftime("%Y-%m-%d %H:%M")


def clamp_page(page: int, pages: int) -> int:
    if pages <= 0:
        return 0
    if page < 0:
        return 0
    if page >= pages:
        return pages - 1
    return page


def _chunk_buttons(btns: List[InlineKeyboardButton], per_row: int = 8) -> List[List[InlineKeyboardButton]]:
    rows: List[List[InlineKeyboardButton]] = []
    for i in range(0, len(btns), per_row):
        rows.append(btns[i:i + per_row])
    return rows


def build_list_view(
    user_id: int,
    page: int = 0,
    limit: int = 5,
    selected_task_id: Optional[int] = None,
) -> Tuple[str, InlineKeyboardMarkup]:
    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    if limit <= 0:
        limit = 5
    page = max(0, page)

    total = repo.count_open(user_id)
    if total == 0:
        text = "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç. –î–æ–±–∞–≤—å –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥–æ–π /add"
        return text, InlineKeyboardMarkup(inline_keyboard=[])

    pages = (total + limit - 1) // limit
    page = clamp_page(page, pages)
    offset = page * limit

    rows = repo.list_open_paged(user_id, offset, limit)
    if rows:
        print("DEBUG row keys:", list(rows[0].keys()))

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header_lines = [
        "üóíÔ∏è –ú–æ–∏ –∑–∞–¥–∞—á–∏",
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {pages}",
        f"–í—Å–µ–≥–æ: {total}",
        "",
    ]

    # –¢–µ–ª–æ —Å–ø–∏—Å–∫–∞: –ø–æ–º–µ—Ç–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–µ–ª–∫–æ–π
    body_lines = []
    for i, row in enumerate(rows, start=1):
        is_selected = (selected_task_id is not None and row["id"] == selected_task_id)
        prefix = "‚Üí " if is_selected else ""
        info = [
            f"{prefix}{i}) {row['task_name']}",
            f"   –°–ª–µ–¥. –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {format_ts(row['next_reminder_at'])}",
            f"   –ò–Ω—Ç–µ—Ä–≤–∞–ª: {int(row['interval'])} –º–∏–Ω",
        ]
        if row["task_note"]:
            info.append(f"   –ó–∞–º–µ—Ç–∫–∞: {row['task_note']}")
        if row["paused_until"]:
            info.append(f"   –û—Ç–ª–æ–∂–µ–Ω–æ –¥–æ: {format_ts(row['paused_until'])}")
        body_lines.append("\n".join(info))

    text = "\n".join(header_lines + body_lines) or "üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç."

    kb_rows: List[List[InlineKeyboardButton]] = []

    if selected_task_id is None:
        # –†–∏—Å—É–µ–º –∫–Ω–æ–ø–∫—É-–Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –∑–∞–¥–∞—á (1..N)
        number_buttons = []
        for i, row in enumerate(rows, start=1):
            number_buttons.append(
                InlineKeyboardButton(
                    text=str(i),
                    callback_data=f"select_task|{row['id']}|{page}|{limit}",
                )
            )
        kb_rows.extend(_chunk_buttons(number_buttons, per_row=8))
    else:
        # –†–∏—Å—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
        tid = selected_task_id
        kb_rows.append([
            InlineKeyboardButton(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"task_done|{tid}|{page}|{limit}")
        ])
        kb_rows.append([
            InlineKeyboardButton(text="‚è± +15–º", callback_data=f"task_snooze|{tid}|15|{page}|{limit}"),
            InlineKeyboardButton(text="‚è± +1—á",  callback_data=f"task_snooze|{tid}|60|{page}|{limit}"),
            InlineKeyboardButton(text="‚è± +1–¥",  callback_data=f"task_snooze|{tid}|1440|{page}|{limit}"),
        ])
        kb_rows.append([
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"task_delete|{tid}|{page}|{limit}")
        ])
        kb_rows.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_list|{page}|{limit}")
        ])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–≤—Å–µ–≥–¥–∞ –≤–Ω–∏–∑—É)
    nav_row: List[InlineKeyboardButton] = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"list_page|{page - 1}|{limit}"))
    if page < pages - 1:
        nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"list_page|{page + 1}|{limit}"))
    if nav_row:
        kb_rows.append(nav_row)

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_rows)
    return text, keyboard


def add_task_service(user_id: int, task_name: str, notes: str | None, interval: int) -> str:
    # –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–∞
    if not task_name or not task_name.strip():
        raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–æ–µ")
    # if interval <= 0:
    #   raise ValueError("–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

    task_id = repo.add_task(user_id, task_name.strip(), notes, interval)
    return f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {task_id}). –°–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {interval} –º–∏–Ω—É—Ç."



